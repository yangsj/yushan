/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class get_rank_list_ret_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("get_rank_list_ret_t");
    private static const RANK_TYPE_FIELD_DESC:TField = new TField("rank_type", TType.I16, 1);
    private static const RANK_LIST_FIELD_DESC:TField = new TField("rank_list", TType.LIST, 2);

    private var _rank_type:int;
    public static const RANK_TYPE:int = 1;
    private var _rank_list:Array;
    public static const RANK_LIST:int = 2;

    private var __isset_rank_type:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[RANK_TYPE] = new FieldMetaData("rank_type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[RANK_LIST] = new FieldMetaData("rank_list", TFieldRequirementType.DEFAULT, 
          new ListMetaData(TType.LIST, 
              new StructMetaData(TType.STRUCT, rank_data_t)));
    }
    {
      FieldMetaData.addStructMetaDataMap(get_rank_list_ret_t, metaDataMap);
    }

    public function get_rank_list_ret_t() {
      this._rank_type = 0;
    }

    public function get rank_type():int {
      return this._rank_type;
    }

    public function set rank_type(rank_type:int):void {
      this._rank_type = rank_type;
      this.__isset_rank_type = true;
    }

    public function unsetRank_type():void {
      this.__isset_rank_type = false;
    }

    // Returns true if field rank_type is set (has been assigned a value) and false otherwise
    public function isSetRank_type():Boolean {
      return this.__isset_rank_type;
    }

    public function get rank_list():Array {
      return this._rank_list;
    }

    public function set rank_list(rank_list:Array):void {
      this._rank_list = rank_list;
    }

    public function unsetRank_list():void {
      this.rank_list = null;
    }

    // Returns true if field rank_list is set (has been assigned a value) and false otherwise
    public function isSetRank_list():Boolean {
      return this.rank_list != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case RANK_TYPE:
        if (value == null) {
          unsetRank_type();
        } else {
          this.rank_type = value;
        }
        break;

      case RANK_LIST:
        if (value == null) {
          unsetRank_list();
        } else {
          this.rank_list = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case RANK_TYPE:
        return this.rank_type;
      case RANK_LIST:
        return this.rank_list;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case RANK_TYPE:
        return isSetRank_type();
      case RANK_LIST:
        return isSetRank_list();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case RANK_TYPE:
            if (field.type == TType.I16) {
              this.rank_type = iprot.readI16();
              this.__isset_rank_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case RANK_LIST:
            if (field.type == TType.LIST) {
              {
                var _list290:TList = iprot.readListBegin();
                this.rank_list = new Array();
                for (var _i291:int = 0; _i291 < _list290.size; ++_i291)
                {
                  var _elem292:rank_data_t;
                  _elem292 = new rank_data_t();
                  _elem292.read(iprot);
                  this.rank_list.push(_elem292);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RANK_TYPE_FIELD_DESC);
      oprot.writeI16(this.rank_type);
      oprot.writeFieldEnd();
      if (this.rank_list != null) {
        oprot.writeFieldBegin(RANK_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.rank_list.length));
          for each (var elem293:* in this.rank_list)          {
            elem293.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("get_rank_list_ret_t(");
      var first:Boolean = true;

      ret += "rank_type:";
      ret += this.rank_type;
      first = false;
      if (!first) ret +=  ", ";
      ret += "rank_list:";
      if (this.rank_list == null) {
        ret += "null";
      } else {
        ret += this.rank_list;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
