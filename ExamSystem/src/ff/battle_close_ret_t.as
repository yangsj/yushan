/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class battle_close_ret_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("battle_close_ret_t");
    private static const WIN_FIELD_DESC:TField = new TField("win", TType.BOOL, 1);
    private static const FLAG_FIELD_DESC:TField = new TField("flag", TType.I16, 2);
    private static const SELF_RESULT_FIELD_DESC:TField = new TField("self_result", TType.STRUCT, 3);
    private static const DEST_RESULT_FIELD_DESC:TField = new TField("dest_result", TType.STRUCT, 4);

    private var _win:Boolean;
    public static const WIN:int = 1;
    private var _flag:int;
    public static const FLAG:int = 2;
    private var _self_result:end_round_ret_t;
    public static const SELF_RESULT:int = 3;
    private var _dest_result:end_round_ret_t;
    public static const DEST_RESULT:int = 4;

    private var __isset_win:Boolean = false;
    private var __isset_flag:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[WIN] = new FieldMetaData("win", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.BOOL));
      metaDataMap[FLAG] = new FieldMetaData("flag", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[SELF_RESULT] = new FieldMetaData("self_result", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, end_round_ret_t));
      metaDataMap[DEST_RESULT] = new FieldMetaData("dest_result", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, end_round_ret_t));
    }
    {
      FieldMetaData.addStructMetaDataMap(battle_close_ret_t, metaDataMap);
    }

    public function battle_close_ret_t() {
      this._win = 0;
      this._flag = 0;
    }

    public function get win():Boolean {
      return this._win;
    }

    public function set win(win:Boolean):void {
      this._win = win;
      this.__isset_win = true;
    }

    public function unsetWin():void {
      this.__isset_win = false;
    }

    // Returns true if field win is set (has been assigned a value) and false otherwise
    public function isSetWin():Boolean {
      return this.__isset_win;
    }

    public function get flag():int {
      return this._flag;
    }

    public function set flag(flag:int):void {
      this._flag = flag;
      this.__isset_flag = true;
    }

    public function unsetFlag():void {
      this.__isset_flag = false;
    }

    // Returns true if field flag is set (has been assigned a value) and false otherwise
    public function isSetFlag():Boolean {
      return this.__isset_flag;
    }

    public function get self_result():end_round_ret_t {
      return this._self_result;
    }

    public function set self_result(self_result:end_round_ret_t):void {
      this._self_result = self_result;
    }

    public function unsetSelf_result():void {
      this.self_result = null;
    }

    // Returns true if field self_result is set (has been assigned a value) and false otherwise
    public function isSetSelf_result():Boolean {
      return this.self_result != null;
    }

    public function get dest_result():end_round_ret_t {
      return this._dest_result;
    }

    public function set dest_result(dest_result:end_round_ret_t):void {
      this._dest_result = dest_result;
    }

    public function unsetDest_result():void {
      this.dest_result = null;
    }

    // Returns true if field dest_result is set (has been assigned a value) and false otherwise
    public function isSetDest_result():Boolean {
      return this.dest_result != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case WIN:
        if (value == null) {
          unsetWin();
        } else {
          this.win = value;
        }
        break;

      case FLAG:
        if (value == null) {
          unsetFlag();
        } else {
          this.flag = value;
        }
        break;

      case SELF_RESULT:
        if (value == null) {
          unsetSelf_result();
        } else {
          this.self_result = value;
        }
        break;

      case DEST_RESULT:
        if (value == null) {
          unsetDest_result();
        } else {
          this.dest_result = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case WIN:
        return this.win;
      case FLAG:
        return this.flag;
      case SELF_RESULT:
        return this.self_result;
      case DEST_RESULT:
        return this.dest_result;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case WIN:
        return isSetWin();
      case FLAG:
        return isSetFlag();
      case SELF_RESULT:
        return isSetSelf_result();
      case DEST_RESULT:
        return isSetDest_result();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case WIN:
            if (field.type == TType.BOOL) {
              this.win = iprot.readBool();
              this.__isset_win = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FLAG:
            if (field.type == TType.I16) {
              this.flag = iprot.readI16();
              this.__isset_flag = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SELF_RESULT:
            if (field.type == TType.STRUCT) {
              this.self_result = new end_round_ret_t();
              this.self_result.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEST_RESULT:
            if (field.type == TType.STRUCT) {
              this.dest_result = new end_round_ret_t();
              this.dest_result.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WIN_FIELD_DESC);
      oprot.writeBool(this.win);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeI16(this.flag);
      oprot.writeFieldEnd();
      if (this.self_result != null) {
        oprot.writeFieldBegin(SELF_RESULT_FIELD_DESC);
        this.self_result.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.dest_result != null) {
        oprot.writeFieldBegin(DEST_RESULT_FIELD_DESC);
        this.dest_result.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("battle_close_ret_t(");
      var first:Boolean = true;

      ret += "win:";
      ret += this.win;
      first = false;
      if (!first) ret +=  ", ";
      ret += "flag:";
      ret += this.flag;
      first = false;
      if (!first) ret +=  ", ";
      ret += "self_result:";
      if (this.self_result == null) {
        ret += "null";
      } else {
        ret += this.self_result;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "dest_result:";
      if (this.dest_result == null) {
        ret += "null";
      } else {
        ret += this.dest_result;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
