/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class rank_data_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("rank_data_t");
    private static const RANK_NUM_FIELD_DESC:TField = new TField("rank_num", TType.I16, 1);
    private static const NICK_NAME_FIELD_DESC:TField = new TField("nick_name", TType.STRING, 2);
    private static const LEVEL_FIELD_DESC:TField = new TField("level", TType.I16, 3);
    private static const VALID_TIME_FIELD_DESC:TField = new TField("valid_time", TType.STRING, 4);
    private static const HONOUR_FIELD_DESC:TField = new TField("honour", TType.STRING, 5);
    private static const UID_FIELD_DESC:TField = new TField("uid", TType.I32, 6);

    private var _rank_num:int;
    public static const RANK_NUM:int = 1;
    private var _nick_name:String;
    public static const NICK_NAME:int = 2;
    private var _level:int;
    public static const LEVEL:int = 3;
    private var _valid_time:String;
    public static const VALID_TIME:int = 4;
    private var _honour:String;
    public static const HONOUR:int = 5;
    private var _uid:int;
    public static const UID:int = 6;

    private var __isset_rank_num:Boolean = false;
    private var __isset_level:Boolean = false;
    private var __isset_uid:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[RANK_NUM] = new FieldMetaData("rank_num", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[NICK_NAME] = new FieldMetaData("nick_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[LEVEL] = new FieldMetaData("level", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[VALID_TIME] = new FieldMetaData("valid_time", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[HONOUR] = new FieldMetaData("honour", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[UID] = new FieldMetaData("uid", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
    }
    {
      FieldMetaData.addStructMetaDataMap(rank_data_t, metaDataMap);
    }

    public function rank_data_t() {
      this._rank_num = 1;
      this._level = 0;
      this._uid = 0;
    }

    public function get rank_num():int {
      return this._rank_num;
    }

    public function set rank_num(rank_num:int):void {
      this._rank_num = rank_num;
      this.__isset_rank_num = true;
    }

    public function unsetRank_num():void {
      this.__isset_rank_num = false;
    }

    // Returns true if field rank_num is set (has been assigned a value) and false otherwise
    public function isSetRank_num():Boolean {
      return this.__isset_rank_num;
    }

    public function get nick_name():String {
      return this._nick_name;
    }

    public function set nick_name(nick_name:String):void {
      this._nick_name = nick_name;
    }

    public function unsetNick_name():void {
      this.nick_name = null;
    }

    // Returns true if field nick_name is set (has been assigned a value) and false otherwise
    public function isSetNick_name():Boolean {
      return this.nick_name != null;
    }

    public function get level():int {
      return this._level;
    }

    public function set level(level:int):void {
      this._level = level;
      this.__isset_level = true;
    }

    public function unsetLevel():void {
      this.__isset_level = false;
    }

    // Returns true if field level is set (has been assigned a value) and false otherwise
    public function isSetLevel():Boolean {
      return this.__isset_level;
    }

    public function get valid_time():String {
      return this._valid_time;
    }

    public function set valid_time(valid_time:String):void {
      this._valid_time = valid_time;
    }

    public function unsetValid_time():void {
      this.valid_time = null;
    }

    // Returns true if field valid_time is set (has been assigned a value) and false otherwise
    public function isSetValid_time():Boolean {
      return this.valid_time != null;
    }

    public function get honour():String {
      return this._honour;
    }

    public function set honour(honour:String):void {
      this._honour = honour;
    }

    public function unsetHonour():void {
      this.honour = null;
    }

    // Returns true if field honour is set (has been assigned a value) and false otherwise
    public function isSetHonour():Boolean {
      return this.honour != null;
    }

    public function get uid():int {
      return this._uid;
    }

    public function set uid(uid:int):void {
      this._uid = uid;
      this.__isset_uid = true;
    }

    public function unsetUid():void {
      this.__isset_uid = false;
    }

    // Returns true if field uid is set (has been assigned a value) and false otherwise
    public function isSetUid():Boolean {
      return this.__isset_uid;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case RANK_NUM:
        if (value == null) {
          unsetRank_num();
        } else {
          this.rank_num = value;
        }
        break;

      case NICK_NAME:
        if (value == null) {
          unsetNick_name();
        } else {
          this.nick_name = value;
        }
        break;

      case LEVEL:
        if (value == null) {
          unsetLevel();
        } else {
          this.level = value;
        }
        break;

      case VALID_TIME:
        if (value == null) {
          unsetValid_time();
        } else {
          this.valid_time = value;
        }
        break;

      case HONOUR:
        if (value == null) {
          unsetHonour();
        } else {
          this.honour = value;
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          this.uid = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case RANK_NUM:
        return this.rank_num;
      case NICK_NAME:
        return this.nick_name;
      case LEVEL:
        return this.level;
      case VALID_TIME:
        return this.valid_time;
      case HONOUR:
        return this.honour;
      case UID:
        return this.uid;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case RANK_NUM:
        return isSetRank_num();
      case NICK_NAME:
        return isSetNick_name();
      case LEVEL:
        return isSetLevel();
      case VALID_TIME:
        return isSetValid_time();
      case HONOUR:
        return isSetHonour();
      case UID:
        return isSetUid();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case RANK_NUM:
            if (field.type == TType.I16) {
              this.rank_num = iprot.readI16();
              this.__isset_rank_num = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case NICK_NAME:
            if (field.type == TType.STRING) {
              this.nick_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LEVEL:
            if (field.type == TType.I16) {
              this.level = iprot.readI16();
              this.__isset_level = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case VALID_TIME:
            if (field.type == TType.STRING) {
              this.valid_time = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case HONOUR:
            if (field.type == TType.STRING) {
              this.honour = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UID:
            if (field.type == TType.I32) {
              this.uid = iprot.readI32();
              this.__isset_uid = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RANK_NUM_FIELD_DESC);
      oprot.writeI16(this.rank_num);
      oprot.writeFieldEnd();
      if (this.nick_name != null) {
        oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
        oprot.writeString(this.nick_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI16(this.level);
      oprot.writeFieldEnd();
      if (this.valid_time != null) {
        oprot.writeFieldBegin(VALID_TIME_FIELD_DESC);
        oprot.writeString(this.valid_time);
        oprot.writeFieldEnd();
      }
      if (this.honour != null) {
        oprot.writeFieldBegin(HONOUR_FIELD_DESC);
        oprot.writeString(this.honour);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI32(this.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("rank_data_t(");
      var first:Boolean = true;

      ret += "rank_num:";
      ret += this.rank_num;
      first = false;
      if (!first) ret +=  ", ";
      ret += "nick_name:";
      if (this.nick_name == null) {
        ret += "null";
      } else {
        ret += this.nick_name;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "level:";
      ret += this.level;
      first = false;
      if (!first) ret +=  ", ";
      ret += "valid_time:";
      if (this.valid_time == null) {
        ret += "null";
      } else {
        ret += this.valid_time;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "honour:";
      if (this.honour == null) {
        ret += "null";
      } else {
        ret += this.honour;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "uid:";
      ret += this.uid;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
