/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class task_accept_award_ret_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("task_accept_award_ret_t");
    private static const TASK_ID_FIELD_DESC:TField = new TField("task_id", TType.I32, 1);
    private static const COIN_AWARD_FIELD_DESC:TField = new TField("coin_award", TType.I32, 2);
    private static const EXP_AWARD_FIELD_DESC:TField = new TField("exp_award", TType.I32, 3);
    private static const ITEM_AWARD_FIELD_DESC:TField = new TField("item_award", TType.MAP, 4);
    private static const STATUS_FIELD_DESC:TField = new TField("status", TType.I32, 5);
    private static const DESC_FIELD_DESC:TField = new TField("desc", TType.STRING, 6);

    private var _task_id:int;
    public static const TASK_ID:int = 1;
    private var _coin_award:int;
    public static const COIN_AWARD:int = 2;
    private var _exp_award:int;
    public static const EXP_AWARD:int = 3;
    private var _item_award:Dictionary;
    public static const ITEM_AWARD:int = 4;
    private var _status:int;
    public static const STATUS:int = 5;
    private var _desc:String;
    public static const DESC:int = 6;

    private var __isset_task_id:Boolean = false;
    private var __isset_coin_award:Boolean = false;
    private var __isset_exp_award:Boolean = false;
    private var __isset_status:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[TASK_ID] = new FieldMetaData("task_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[COIN_AWARD] = new FieldMetaData("coin_award", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[EXP_AWARD] = new FieldMetaData("exp_award", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[ITEM_AWARD] = new FieldMetaData("item_award", TFieldRequirementType.DEFAULT, 
          new MapMetaData(TType.MAP, 
              new FieldValueMetaData(TType.I32), 
              new FieldValueMetaData(TType.I32)));
      metaDataMap[STATUS] = new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[DESC] = new FieldMetaData("desc", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(task_accept_award_ret_t, metaDataMap);
    }

    public function task_accept_award_ret_t() {
      this._task_id = 0;
      this._coin_award = 0;
      this._exp_award = 0;
      this._status = 0;
    }

    public function get task_id():int {
      return this._task_id;
    }

    public function set task_id(task_id:int):void {
      this._task_id = task_id;
      this.__isset_task_id = true;
    }

    public function unsetTask_id():void {
      this.__isset_task_id = false;
    }

    // Returns true if field task_id is set (has been assigned a value) and false otherwise
    public function isSetTask_id():Boolean {
      return this.__isset_task_id;
    }

    public function get coin_award():int {
      return this._coin_award;
    }

    public function set coin_award(coin_award:int):void {
      this._coin_award = coin_award;
      this.__isset_coin_award = true;
    }

    public function unsetCoin_award():void {
      this.__isset_coin_award = false;
    }

    // Returns true if field coin_award is set (has been assigned a value) and false otherwise
    public function isSetCoin_award():Boolean {
      return this.__isset_coin_award;
    }

    public function get exp_award():int {
      return this._exp_award;
    }

    public function set exp_award(exp_award:int):void {
      this._exp_award = exp_award;
      this.__isset_exp_award = true;
    }

    public function unsetExp_award():void {
      this.__isset_exp_award = false;
    }

    // Returns true if field exp_award is set (has been assigned a value) and false otherwise
    public function isSetExp_award():Boolean {
      return this.__isset_exp_award;
    }

    public function get item_award():Dictionary {
      return this._item_award;
    }

    public function set item_award(item_award:Dictionary):void {
      this._item_award = item_award;
    }

    public function unsetItem_award():void {
      this.item_award = null;
    }

    // Returns true if field item_award is set (has been assigned a value) and false otherwise
    public function isSetItem_award():Boolean {
      return this.item_award != null;
    }

    public function get status():int {
      return this._status;
    }

    public function set status(status:int):void {
      this._status = status;
      this.__isset_status = true;
    }

    public function unsetStatus():void {
      this.__isset_status = false;
    }

    // Returns true if field status is set (has been assigned a value) and false otherwise
    public function isSetStatus():Boolean {
      return this.__isset_status;
    }

    public function get desc():String {
      return this._desc;
    }

    public function set desc(desc:String):void {
      this._desc = desc;
    }

    public function unsetDesc():void {
      this.desc = null;
    }

    // Returns true if field desc is set (has been assigned a value) and false otherwise
    public function isSetDesc():Boolean {
      return this.desc != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case TASK_ID:
        if (value == null) {
          unsetTask_id();
        } else {
          this.task_id = value;
        }
        break;

      case COIN_AWARD:
        if (value == null) {
          unsetCoin_award();
        } else {
          this.coin_award = value;
        }
        break;

      case EXP_AWARD:
        if (value == null) {
          unsetExp_award();
        } else {
          this.exp_award = value;
        }
        break;

      case ITEM_AWARD:
        if (value == null) {
          unsetItem_award();
        } else {
          this.item_award = value;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value;
        }
        break;

      case DESC:
        if (value == null) {
          unsetDesc();
        } else {
          this.desc = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case TASK_ID:
        return this.task_id;
      case COIN_AWARD:
        return this.coin_award;
      case EXP_AWARD:
        return this.exp_award;
      case ITEM_AWARD:
        return this.item_award;
      case STATUS:
        return this.status;
      case DESC:
        return this.desc;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case TASK_ID:
        return isSetTask_id();
      case COIN_AWARD:
        return isSetCoin_award();
      case EXP_AWARD:
        return isSetExp_award();
      case ITEM_AWARD:
        return isSetItem_award();
      case STATUS:
        return isSetStatus();
      case DESC:
        return isSetDesc();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case TASK_ID:
            if (field.type == TType.I32) {
              this.task_id = iprot.readI32();
              this.__isset_task_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case COIN_AWARD:
            if (field.type == TType.I32) {
              this.coin_award = iprot.readI32();
              this.__isset_coin_award = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case EXP_AWARD:
            if (field.type == TType.I32) {
              this.exp_award = iprot.readI32();
              this.__isset_exp_award = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ITEM_AWARD:
            if (field.type == TType.MAP) {
              {
                var _map119:TMap = iprot.readMapBegin();
                this.item_award = new Dictionary();
                for (var _i120:int = 0; _i120 < _map119.size; ++_i120)
                {
                  var _key121:int;
                  var _val122:int;
                  _key121 = iprot.readI32();
                  _val122 = iprot.readI32();
                  this.item_award[_key121] = _val122;
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STATUS:
            if (field.type == TType.I32) {
              this.status = iprot.readI32();
              this.__isset_status = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DESC:
            if (field.type == TType.STRING) {
              this.desc = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(this.task_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COIN_AWARD_FIELD_DESC);
      oprot.writeI32(this.coin_award);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXP_AWARD_FIELD_DESC);
      oprot.writeI32(this.exp_award);
      oprot.writeFieldEnd();
      if (this.item_award != null) {
        oprot.writeFieldBegin(ITEM_AWARD_FIELD_DESC);
        {
          var _sizeCounter124:int = 0;
          for (var _key123:* in this.item_award) {
            _sizeCounter124++;
          }
          oprot.writeMapBegin(new TMap(TType.I32, TType.I32, _sizeCounter124));
          for (var elem125:* in this.item_award)          {
            oprot.writeI32(elem125);
            oprot.writeI32(this.item_award[elem125]);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
      if (this.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(this.desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("task_accept_award_ret_t(");
      var first:Boolean = true;

      ret += "task_id:";
      ret += this.task_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "coin_award:";
      ret += this.coin_award;
      first = false;
      if (!first) ret +=  ", ";
      ret += "exp_award:";
      ret += this.exp_award;
      first = false;
      if (!first) ret +=  ", ";
      ret += "item_award:";
      if (this.item_award == null) {
        ret += "null";
      } else {
        ret += this.item_award;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "status:";
      ret += this.status;
      first = false;
      if (!first) ret +=  ", ";
      ret += "desc:";
      if (this.desc == null) {
        ret += "null";
      } else {
        ret += this.desc;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
