/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class start_round_req_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("start_round_req_t");
    private static const ROUND_TYPE_FIELD_DESC:TField = new TField("round_type", TType.I16, 1);
    private static const ROUND_GROUP_ID_FIELD_DESC:TField = new TField("round_group_id", TType.I16, 2);
    private static const ROUND_ID_FIELD_DESC:TField = new TField("round_id", TType.I16, 3);
    private static const MODE_FIELD_DESC:TField = new TField("mode", TType.I16, 4);

    private var _round_type:int;
    public static const ROUND_TYPE:int = 1;
    private var _round_group_id:int;
    public static const ROUND_GROUP_ID:int = 2;
    private var _round_id:int;
    public static const ROUND_ID:int = 3;
    private var _mode:int;
    public static const MODE:int = 4;

    private var __isset_round_type:Boolean = false;
    private var __isset_round_group_id:Boolean = false;
    private var __isset_round_id:Boolean = false;
    private var __isset_mode:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ROUND_TYPE] = new FieldMetaData("round_type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[ROUND_GROUP_ID] = new FieldMetaData("round_group_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[ROUND_ID] = new FieldMetaData("round_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[MODE] = new FieldMetaData("mode", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
    }
    {
      FieldMetaData.addStructMetaDataMap(start_round_req_t, metaDataMap);
    }

    public function start_round_req_t() {
      this._round_type = 0;
      this._round_group_id = 0;
      this._round_id = 0;
      this._mode = 0;
    }

    public function get round_type():int {
      return this._round_type;
    }

    public function set round_type(round_type:int):void {
      this._round_type = round_type;
      this.__isset_round_type = true;
    }

    public function unsetRound_type():void {
      this.__isset_round_type = false;
    }

    // Returns true if field round_type is set (has been assigned a value) and false otherwise
    public function isSetRound_type():Boolean {
      return this.__isset_round_type;
    }

    public function get round_group_id():int {
      return this._round_group_id;
    }

    public function set round_group_id(round_group_id:int):void {
      this._round_group_id = round_group_id;
      this.__isset_round_group_id = true;
    }

    public function unsetRound_group_id():void {
      this.__isset_round_group_id = false;
    }

    // Returns true if field round_group_id is set (has been assigned a value) and false otherwise
    public function isSetRound_group_id():Boolean {
      return this.__isset_round_group_id;
    }

    public function get round_id():int {
      return this._round_id;
    }

    public function set round_id(round_id:int):void {
      this._round_id = round_id;
      this.__isset_round_id = true;
    }

    public function unsetRound_id():void {
      this.__isset_round_id = false;
    }

    // Returns true if field round_id is set (has been assigned a value) and false otherwise
    public function isSetRound_id():Boolean {
      return this.__isset_round_id;
    }

    public function get mode():int {
      return this._mode;
    }

    public function set mode(mode:int):void {
      this._mode = mode;
      this.__isset_mode = true;
    }

    public function unsetMode():void {
      this.__isset_mode = false;
    }

    // Returns true if field mode is set (has been assigned a value) and false otherwise
    public function isSetMode():Boolean {
      return this.__isset_mode;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ROUND_TYPE:
        if (value == null) {
          unsetRound_type();
        } else {
          this.round_type = value;
        }
        break;

      case ROUND_GROUP_ID:
        if (value == null) {
          unsetRound_group_id();
        } else {
          this.round_group_id = value;
        }
        break;

      case ROUND_ID:
        if (value == null) {
          unsetRound_id();
        } else {
          this.round_id = value;
        }
        break;

      case MODE:
        if (value == null) {
          unsetMode();
        } else {
          this.mode = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ROUND_TYPE:
        return this.round_type;
      case ROUND_GROUP_ID:
        return this.round_group_id;
      case ROUND_ID:
        return this.round_id;
      case MODE:
        return this.mode;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ROUND_TYPE:
        return isSetRound_type();
      case ROUND_GROUP_ID:
        return isSetRound_group_id();
      case ROUND_ID:
        return isSetRound_id();
      case MODE:
        return isSetMode();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ROUND_TYPE:
            if (field.type == TType.I16) {
              this.round_type = iprot.readI16();
              this.__isset_round_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROUND_GROUP_ID:
            if (field.type == TType.I16) {
              this.round_group_id = iprot.readI16();
              this.__isset_round_group_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROUND_ID:
            if (field.type == TType.I16) {
              this.round_id = iprot.readI16();
              this.__isset_round_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case MODE:
            if (field.type == TType.I16) {
              this.mode = iprot.readI16();
              this.__isset_mode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROUND_TYPE_FIELD_DESC);
      oprot.writeI16(this.round_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROUND_GROUP_ID_FIELD_DESC);
      oprot.writeI16(this.round_group_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
      oprot.writeI16(this.round_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MODE_FIELD_DESC);
      oprot.writeI16(this.mode);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("start_round_req_t(");
      var first:Boolean = true;

      ret += "round_type:";
      ret += this.round_type;
      first = false;
      if (!first) ret +=  ", ";
      ret += "round_group_id:";
      ret += this.round_group_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "round_id:";
      ret += this.round_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "mode:";
      ret += this.mode;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
