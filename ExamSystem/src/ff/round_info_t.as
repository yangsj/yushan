/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class round_info_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("round_info_t");
    private static const ROUND_ID_FIELD_DESC:TField = new TField("round_id", TType.I32, 1);
    private static const STATUS_FIELD_DESC:TField = new TField("status", TType.I16, 2);
    private static const STAR_NUM_FIELD_DESC:TField = new TField("star_num", TType.I16, 3);
    private static const ROUNT_TYPE_FIELD_DESC:TField = new TField("rount_type", TType.I16, 4);

    private var _round_id:int;
    public static const ROUND_ID:int = 1;
    private var _status:int;
    public static const STATUS:int = 2;
    private var _star_num:int;
    public static const STAR_NUM:int = 3;
    private var _rount_type:int;
    public static const ROUNT_TYPE:int = 4;

    private var __isset_round_id:Boolean = false;
    private var __isset_status:Boolean = false;
    private var __isset_star_num:Boolean = false;
    private var __isset_rount_type:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ROUND_ID] = new FieldMetaData("round_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[STATUS] = new FieldMetaData("status", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[STAR_NUM] = new FieldMetaData("star_num", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
      metaDataMap[ROUNT_TYPE] = new FieldMetaData("rount_type", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
    }
    {
      FieldMetaData.addStructMetaDataMap(round_info_t, metaDataMap);
    }

    public function round_info_t() {
      this._status = 0;
      this._star_num = 0;
      this._rount_type = 0;
    }

    public function get round_id():int {
      return this._round_id;
    }

    public function set round_id(round_id:int):void {
      this._round_id = round_id;
      this.__isset_round_id = true;
    }

    public function unsetRound_id():void {
      this.__isset_round_id = false;
    }

    // Returns true if field round_id is set (has been assigned a value) and false otherwise
    public function isSetRound_id():Boolean {
      return this.__isset_round_id;
    }

    public function get status():int {
      return this._status;
    }

    public function set status(status:int):void {
      this._status = status;
      this.__isset_status = true;
    }

    public function unsetStatus():void {
      this.__isset_status = false;
    }

    // Returns true if field status is set (has been assigned a value) and false otherwise
    public function isSetStatus():Boolean {
      return this.__isset_status;
    }

    public function get star_num():int {
      return this._star_num;
    }

    public function set star_num(star_num:int):void {
      this._star_num = star_num;
      this.__isset_star_num = true;
    }

    public function unsetStar_num():void {
      this.__isset_star_num = false;
    }

    // Returns true if field star_num is set (has been assigned a value) and false otherwise
    public function isSetStar_num():Boolean {
      return this.__isset_star_num;
    }

    public function get rount_type():int {
      return this._rount_type;
    }

    public function set rount_type(rount_type:int):void {
      this._rount_type = rount_type;
      this.__isset_rount_type = true;
    }

    public function unsetRount_type():void {
      this.__isset_rount_type = false;
    }

    // Returns true if field rount_type is set (has been assigned a value) and false otherwise
    public function isSetRount_type():Boolean {
      return this.__isset_rount_type;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ROUND_ID:
        if (value == null) {
          unsetRound_id();
        } else {
          this.round_id = value;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value;
        }
        break;

      case STAR_NUM:
        if (value == null) {
          unsetStar_num();
        } else {
          this.star_num = value;
        }
        break;

      case ROUNT_TYPE:
        if (value == null) {
          unsetRount_type();
        } else {
          this.rount_type = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ROUND_ID:
        return this.round_id;
      case STATUS:
        return this.status;
      case STAR_NUM:
        return this.star_num;
      case ROUNT_TYPE:
        return this.rount_type;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ROUND_ID:
        return isSetRound_id();
      case STATUS:
        return isSetStatus();
      case STAR_NUM:
        return isSetStar_num();
      case ROUNT_TYPE:
        return isSetRount_type();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ROUND_ID:
            if (field.type == TType.I32) {
              this.round_id = iprot.readI32();
              this.__isset_round_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STATUS:
            if (field.type == TType.I16) {
              this.status = iprot.readI16();
              this.__isset_status = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case STAR_NUM:
            if (field.type == TType.I16) {
              this.star_num = iprot.readI16();
              this.__isset_star_num = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ROUNT_TYPE:
            if (field.type == TType.I16) {
              this.rount_type = iprot.readI16();
              this.__isset_rount_type = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ROUND_ID_FIELD_DESC);
      oprot.writeI32(this.round_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI16(this.status);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STAR_NUM_FIELD_DESC);
      oprot.writeI16(this.star_num);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROUNT_TYPE_FIELD_DESC);
      oprot.writeI16(this.rount_type);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("round_info_t(");
      var first:Boolean = true;

      ret += "round_id:";
      ret += this.round_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "status:";
      ret += this.status;
      first = false;
      if (!first) ret +=  ", ";
      ret += "star_num:";
      ret += this.star_num;
      first = false;
      if (!first) ret +=  ", ";
      ret += "rount_type:";
      ret += this.rount_type;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
