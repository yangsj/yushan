/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class battle_invite_ret_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("battle_invite_ret_t");
    private static const DEST_ID_FIELD_DESC:TField = new TField("dest_id", TType.I32, 1);
    private static const DEST_NAME_FIELD_DESC:TField = new TField("dest_name", TType.STRING, 2);
    private static const DEST_GRADE_FIELD_DESC:TField = new TField("dest_grade", TType.STRING, 3);
    private static const DEST_LEVEL_FIELD_DESC:TField = new TField("dest_level", TType.I32, 4);
    private static const GENDER_FIELD_DESC:TField = new TField("gender", TType.I16, 5);

    private var _dest_id:int;
    public static const DEST_ID:int = 1;
    private var _dest_name:String;
    public static const DEST_NAME:int = 2;
    private var _dest_grade:String;
    public static const DEST_GRADE:int = 3;
    private var _dest_level:int;
    public static const DEST_LEVEL:int = 4;
    private var _gender:int;
    public static const GENDER:int = 5;

    private var __isset_dest_id:Boolean = false;
    private var __isset_dest_level:Boolean = false;
    private var __isset_gender:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[DEST_ID] = new FieldMetaData("dest_id", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[DEST_NAME] = new FieldMetaData("dest_name", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[DEST_GRADE] = new FieldMetaData("dest_grade", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[DEST_LEVEL] = new FieldMetaData("dest_level", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[GENDER] = new FieldMetaData("gender", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16));
    }
    {
      FieldMetaData.addStructMetaDataMap(battle_invite_ret_t, metaDataMap);
    }

    public function battle_invite_ret_t() {
      this._dest_id = 0;
      this._gender = 0;
    }

    public function get dest_id():int {
      return this._dest_id;
    }

    public function set dest_id(dest_id:int):void {
      this._dest_id = dest_id;
      this.__isset_dest_id = true;
    }

    public function unsetDest_id():void {
      this.__isset_dest_id = false;
    }

    // Returns true if field dest_id is set (has been assigned a value) and false otherwise
    public function isSetDest_id():Boolean {
      return this.__isset_dest_id;
    }

    public function get dest_name():String {
      return this._dest_name;
    }

    public function set dest_name(dest_name:String):void {
      this._dest_name = dest_name;
    }

    public function unsetDest_name():void {
      this.dest_name = null;
    }

    // Returns true if field dest_name is set (has been assigned a value) and false otherwise
    public function isSetDest_name():Boolean {
      return this.dest_name != null;
    }

    public function get dest_grade():String {
      return this._dest_grade;
    }

    public function set dest_grade(dest_grade:String):void {
      this._dest_grade = dest_grade;
    }

    public function unsetDest_grade():void {
      this.dest_grade = null;
    }

    // Returns true if field dest_grade is set (has been assigned a value) and false otherwise
    public function isSetDest_grade():Boolean {
      return this.dest_grade != null;
    }

    public function get dest_level():int {
      return this._dest_level;
    }

    public function set dest_level(dest_level:int):void {
      this._dest_level = dest_level;
      this.__isset_dest_level = true;
    }

    public function unsetDest_level():void {
      this.__isset_dest_level = false;
    }

    // Returns true if field dest_level is set (has been assigned a value) and false otherwise
    public function isSetDest_level():Boolean {
      return this.__isset_dest_level;
    }

    public function get gender():int {
      return this._gender;
    }

    public function set gender(gender:int):void {
      this._gender = gender;
      this.__isset_gender = true;
    }

    public function unsetGender():void {
      this.__isset_gender = false;
    }

    // Returns true if field gender is set (has been assigned a value) and false otherwise
    public function isSetGender():Boolean {
      return this.__isset_gender;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case DEST_ID:
        if (value == null) {
          unsetDest_id();
        } else {
          this.dest_id = value;
        }
        break;

      case DEST_NAME:
        if (value == null) {
          unsetDest_name();
        } else {
          this.dest_name = value;
        }
        break;

      case DEST_GRADE:
        if (value == null) {
          unsetDest_grade();
        } else {
          this.dest_grade = value;
        }
        break;

      case DEST_LEVEL:
        if (value == null) {
          unsetDest_level();
        } else {
          this.dest_level = value;
        }
        break;

      case GENDER:
        if (value == null) {
          unsetGender();
        } else {
          this.gender = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case DEST_ID:
        return this.dest_id;
      case DEST_NAME:
        return this.dest_name;
      case DEST_GRADE:
        return this.dest_grade;
      case DEST_LEVEL:
        return this.dest_level;
      case GENDER:
        return this.gender;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case DEST_ID:
        return isSetDest_id();
      case DEST_NAME:
        return isSetDest_name();
      case DEST_GRADE:
        return isSetDest_grade();
      case DEST_LEVEL:
        return isSetDest_level();
      case GENDER:
        return isSetGender();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case DEST_ID:
            if (field.type == TType.I32) {
              this.dest_id = iprot.readI32();
              this.__isset_dest_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEST_NAME:
            if (field.type == TType.STRING) {
              this.dest_name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEST_GRADE:
            if (field.type == TType.STRING) {
              this.dest_grade = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case DEST_LEVEL:
            if (field.type == TType.I32) {
              this.dest_level = iprot.readI32();
              this.__isset_dest_level = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case GENDER:
            if (field.type == TType.I16) {
              this.gender = iprot.readI16();
              this.__isset_gender = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(DEST_ID_FIELD_DESC);
      oprot.writeI32(this.dest_id);
      oprot.writeFieldEnd();
      if (this.dest_name != null) {
        oprot.writeFieldBegin(DEST_NAME_FIELD_DESC);
        oprot.writeString(this.dest_name);
        oprot.writeFieldEnd();
      }
      if (this.dest_grade != null) {
        oprot.writeFieldBegin(DEST_GRADE_FIELD_DESC);
        oprot.writeString(this.dest_grade);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DEST_LEVEL_FIELD_DESC);
      oprot.writeI32(this.dest_level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GENDER_FIELD_DESC);
      oprot.writeI16(this.gender);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("battle_invite_ret_t(");
      var first:Boolean = true;

      ret += "dest_id:";
      ret += this.dest_id;
      first = false;
      if (!first) ret +=  ", ";
      ret += "dest_name:";
      if (this.dest_name == null) {
        ret += "null";
      } else {
        ret += this.dest_name;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "dest_grade:";
      if (this.dest_grade == null) {
        ret += "null";
      } else {
        ret += this.dest_grade;
      }
      first = false;
      if (!first) ret +=  ", ";
      ret += "dest_level:";
      ret += this.dest_level;
      first = false;
      if (!first) ret +=  ", ";
      ret += "gender:";
      ret += this.gender;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
