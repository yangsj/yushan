/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ff {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class modify_user_info_req_t implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("modify_user_info_req_t");
    private static const USER_INFO_FIELD_DESC:TField = new TField("user_info", TType.STRUCT, 1);

    private var _user_info:account_req_t;
    public static const USER_INFO:int = 1;


    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[USER_INFO] = new FieldMetaData("user_info", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, account_req_t));
    }
    {
      FieldMetaData.addStructMetaDataMap(modify_user_info_req_t, metaDataMap);
    }

    public function modify_user_info_req_t() {
    }

    public function get user_info():account_req_t {
      return this._user_info;
    }

    public function set user_info(user_info:account_req_t):void {
      this._user_info = user_info;
    }

    public function unsetUser_info():void {
      this.user_info = null;
    }

    // Returns true if field user_info is set (has been assigned a value) and false otherwise
    public function isSetUser_info():Boolean {
      return this.user_info != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case USER_INFO:
        if (value == null) {
          unsetUser_info();
        } else {
          this.user_info = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case USER_INFO:
        return this.user_info;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case USER_INFO:
        return isSetUser_info();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case USER_INFO:
            if (field.type == TType.STRUCT) {
              this.user_info = new account_req_t();
              this.user_info.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.user_info != null) {
        oprot.writeFieldBegin(USER_INFO_FIELD_DESC);
        this.user_info.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("modify_user_info_req_t(");
      var first:Boolean = true;

      ret += "user_info:";
      if (this.user_info == null) {
        ret += "null";
      } else {
        ret += this.user_info;
      }
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
