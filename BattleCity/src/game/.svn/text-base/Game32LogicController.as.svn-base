package com.king.module.game.game_32
{
	import com.king.core.cmd.Cmd_2241;
	import com.king.core.manager.StageKeyboardManager;
	import com.king.module.game.game_32.data.Game32LevelInfo;
	import com.king.module.game.game_32.data.Game32LevelVo;
	import com.king.module.game.game_32.data.Game32MapInfo;
	import com.king.module.game.game_32.skin.Game32DefendFailedEffect;
	
	import flash.display.DisplayObject;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	
	import gs.TweenLite;
	
	import org.JLibrary.manager.StageManager;
	import org.JLibrary.utils.DisplayUtil;
	
	/**
	 * 
	 * @author victor
	 * 			2014-6-30
	 */
	public class Game32LogicController
	{
		private var effectContainer:Sprite;
		private var modelContainer:Sprite;
		
		private var curMapArray:Array;
		private var gameData:Cmd_2241;
		
		private var player:IPlayer;
		private var playerHost:IElement;
		
		private var failedFunc:Function;
		private var passRoundFunc:Function;
		private var refreshScore:Function;
		private var refreshEnemy:Function;
		private var propList:Game32PropList;
		private var enemyList:Game32EnemyList;
		
		private var levelConfig:Game32LevelVo;
		
		private var createEnemyNum:int = 0;
		private var needKillEnemyNum:int = 0;
		private var isInitPropTimer:Boolean = true;
		private var isOvered:Boolean = false;
		private var initEnemyPos:Array = [];
		
		public function Game32LogicController( effectContainer:Sprite, modelContainer:Sprite, failedFunc:Function, passRoundFunc:Function, refreshScore:Function, refreshEnemy:Function )
		{
			this.effectContainer = effectContainer;
			this.modelContainer  = modelContainer;
			this.failedFunc 	 = failedFunc;
			this.passRoundFunc	 = passRoundFunc;
			this.refreshScore	 = refreshScore;
			this.refreshEnemy	 = refreshEnemy;
			
			propList = new Game32PropList();
			enemyList = new Game32EnemyList();
			modelContainer.parent.addChild( propList );
			modelContainer.parent.addChild( enemyList );
			
			clear();
		}
		
		public function clear():void
		{	
			StageManager.stage.removeEventListener(Event.ENTER_FRAME, enterFrameHandler );
			StageManager.stage.removeEventListener( KeyboardEvent.KEY_DOWN, keyboardHandler );
			StageManager.stage.removeEventListener( KeyboardEvent.KEY_UP  , keyboardHandler );
			
			TweenLite.killDelayedCallsTo( startDelayCreateProp );
			
			effectContainer.graphics.clear();
			DisplayUtil.removeAllChildren( effectContainer );
			DisplayUtil.removeAllChildren( modelContainer );
			if ( curMapArray )
			{
				for ( var col:int = 0; col < Game32ConstType.COL; col++ )
				{
					if ( curMapArray[col] )
					{
						for ( var row:int = 0; row < Game32ConstType.ROW; row++ )
						{
							curMapArray[col][row] = null;
						}
					}
					curMapArray[col] = null;
				}
			}
			if ( player )
			{
				player.dispose();
			}
			if ( playerHost )
			{
				playerHost.dispose();
			}
			if ( propList )
			{
				propList.clear();
			}
			if ( enemyList )
			{
				enemyList.clear();
			}
			curMapArray = null;
		}
		
		public function destroy():void
		{
			clear();
		}
		
		public function setData( gameData:Cmd_2241 ):void
		{
			clear();
			
			isInitPropTimer = true;
			isOvered = false;
			
			this.gameData = gameData;
			levelConfig = Game32LevelInfo.getLevelInfoByLevel( gameData.crtLevel );
			curMapArray = levelConfig.curMapArray;
			
			var wall:Game32WalllMaterial;
			
			effectContainer.graphics.clear();
			effectContainer.graphics.lineStyle(1, 0xffffff,0.0 );
			
			var arr:Array = curMapArray[0];
			for ( var i:int = 0; i < arr.length; i++ )
			{
				if ( arr[i] == 0 )
				{
					initEnemyPos.push( i );
				}
			}
			
			for ( var col:int = 0; col < Game32ConstType.COL; col++ )
			{
				effectContainer.graphics.moveTo( 0, col * Game32ConstType.HEIGHT );
				effectContainer.graphics.lineTo( Game32ConstType.WIDTH * Game32ConstType.ROW, col * Game32ConstType.HEIGHT );
				
				for ( var row:int = 0; row < Game32ConstType.ROW; row++ )
				{	
					var id:int = curMapArray[col][row];
					if ( id > 0 )
					{
						wall = Game32WalllMaterial.create( id, Game32ConstType.WIDTH * row, Game32ConstType.HEIGHT * col );
						modelContainer.addChild( wall );
						curMapArray[col][row] = wall;
					}
					
					effectContainer.graphics.moveTo( row * Game32ConstType.WIDTH, 0 );
					effectContainer.graphics.lineTo( row * Game32ConstType.WIDTH, Game32ConstType.COL * Game32ConstType.HEIGHT );
				}
			}
			
			player = new Game32Player();
			modelContainer.addChild( player as DisplayObject );
			
			playerHost = new Game32PlayerHost();
			modelContainer.addChild( playerHost as DisplayObject );
			
			needKillEnemyNum = levelConfig.enemyList.length;
			enemyList.setData( levelConfig.enemyList );
			
			updateEnemyNum();
		}
		
		private function startDelayCreateProp():void
		{
			return ;
			if ( !isInitPropTimer )
			{
				var index:int = Math.random() * levelConfig.propList.length;
				var propId:int = levelConfig.propList[index];
				var item:Game32PropItem = new Game32PropItem( propId );
				var rc:int = int( Math.random() * (Game32ConstType.COL - 6) + 3 );
				var rr:int = int( Math.random() * Game32ConstType.ROW );
				var sx:Number = rr * Game32ConstType.WIDTH;
				var sy:Number = rc * Game32ConstType.HEIGHT;
				item.setPos( sx, sy );
				while ( !checkTargetPointIsEmpty( item ) && curMapArray[rc][rr] )
				{
					rc = int( Math.random() * (Game32ConstType.COL - 6) + 3 );
					rr = int( Math.random() * Game32ConstType.ROW );
					sx = rr * Game32ConstType.WIDTH;
					sy = rc * Game32ConstType.HEIGHT;
					item.setPos( sx, sy );
					trace( "循环查找空置点显示道具" );
				}
				trace( "成功显示道具" );
				modelContainer.addChildAt( item, 0 );
			}
			TweenLite.delayedCall( Math.random() * 10 + 15, startDelayCreateProp );
			isInitPropTimer = false;
		}
		
		private function checkTargetPointIsEmpty( target:IElement ):Boolean
		{
			if ( target )
			{
				var leng:int = modelContainer.numChildren;
				var element:IElement;
				var tx:Number = target.x;
				var ty:Number = target.y;
				var dw:Number = Game32ConstType.WIDTH;
				var dh:Number = Game32ConstType.HEIGHT;
				for ( var i:int = 0; i < leng; i++ )
				{
					element = modelContainer.getChildAt( i ) as IElement;
					if ( element && element != target )
					{
						if ( !isAtRange( element.x, tx - dw, tx + dw ) && !isAtRange( element.y, ty - dh, ty + dh ) )
						{
							return true;
						}
					}
				}
			}
			return false;
		}
		
		private function isAtRange( a:Number, min:Number, max:Number ):Boolean
		{
			return a >= min && a <= max;
		}
		
		public function startGame():void
		{
			startTimer();
			addKeyboardEvent();
			
			for ( var i:int = 0; i < 4; i++ )
			{
				createRandomEnemy();
			}
			
			if (levelConfig.propList && levelConfig.propList.length > 0 )
			{
				trace( "创建道具计时器" );
				startDelayCreateProp();
			}
		}
		
		private function createRandomEnemy():void
		{
			if ( initEnemyPos.length > 0 )
			{
				var enemy:Game32Enemy = new Game32Enemy( enemyList.enemyId, Game32ConstType.DOWN );
				var rRow:int = initEnemyPos[createEnemyNum % initEnemyPos.length ];
				enemy.setPos( rRow * Game32ConstType.WIDTH, 0 );
				modelContainer.addChild( enemy );
				createEnemyNum++;
			}
		}
		
		private function updateEnemyNum():void
		{
			calls( refreshEnemy, needKillEnemyNum );
		}
		
		private function passRound():void
		{
			if ( isOvered == false )
			{
				calls( passRoundFunc, gameData.crtScore );
				isOvered = true;
			}
		}
		
		private function gameEndResult():void
		{
			trace( "你的老家被敌方端掉了1111111111111111111111111" );
			effectContainer.addChild( new Game32DefendFailedEffect( failedFunc ) );
		}
		
		private function getElementByPos( target:IElement ):IElement
		{
			var element:IElement;
			if ( target )
			{
				var px:Number = target.x;
				var py:Number = target.y;
				var leng:int = modelContainer.numChildren;
				for ( var i:int = 0; i < leng; i++ )
				{
					element = modelContainer.getChildAt( i ) as IElement;
					if ( element && element.modelType != Game32ConstType.BULLET && target != element && target.isRange( element ) )
					{
						return element;
					}
				}
			}
			return null;
		}
		
		private function startTimer():void
		{
			StageManager.stage.addEventListener(Event.ENTER_FRAME, enterFrameHandler );
		}
		
		private function addKeyboardEvent():void
		{
			StageManager.stage.addEventListener( KeyboardEvent.KEY_DOWN, keyboardHandler );
			StageManager.stage.addEventListener( KeyboardEvent.KEY_UP  , keyboardHandler );
		}
		
		protected function keyboardHandler(event:KeyboardEvent):void
		{
			var keyCode:uint = event.keyCode;
			var dire:int = -1;
			var isShoot:Boolean = false;
			var isDire:Boolean = false;
			switch ( event.keyCode )
			{
				case Keyboard.W:
				case Keyboard.UP:
					dire = Game32ConstType.UP;
					break;
				case Keyboard.S:
				case Keyboard.DOWN:
					dire = Game32ConstType.DOWN;
					break;
				case Keyboard.D:
				case Keyboard.RIGHT:
					dire = Game32ConstType.RIGHT;
					break;
				case Keyboard.A:
				case Keyboard.LEFT:
					dire = Game32ConstType.LEFT;
					break;
				case Keyboard.SPACE:
					isShoot = true;
					break;
			}
			isDire = dire != -1;
			if ( event.type == KeyboardEvent.KEY_DOWN )
			{
				if ( isShoot )
				{
					player.shoot();
				}
				else if ( isDire )
				{
					player.isKeyDown = false;
					player.direction = dire;
					if ( player.isEdge == false )
					{
						var temp:IElement = getElementByPos( player );
						if ( !temp || ( temp.modelType != Game32ConstType.BULLET && temp.modelType != Game32ConstType.PROP) )
						{
							player.isKeyDown = true;
						}
					}
				}
			}
			else 
			{
				if ( isShoot )
				{
					player.stopShoot();
				}
				else if ( isDire ) 
				{
					player.isKeyDown = false;
//					if ( player.isEdge == false  )
//					{
//						if ( !curMapArray[player.nextCol][player.nextRow] )
//						{
//							player.adjustMove();
//						}
//					}
				}
			}
		}		
		
		protected function enterFrameHandler(event:Event):void
		{
			var dis:IElement;
			var enemy:IEnemy;
			var bullet:IBullet;
			var leng:int = modelContainer.numChildren;
			for ( var i:int = 0; i < leng; i++ )
			{
				dis = modelContainer.getChildAt( i ) as IElement;
				enemy = ( dis as IEnemy );
				bullet = ( dis as IBullet );
				if ( dis )
				{
					if ( enemy )
					{
						if ( enemy.isEdge || getElementByPos( enemy ))
						{
							enemy.changeDirection();
						}
						else
						{
							enemy.updatePos();
						}
					}
					else
					{
						if ( bullet && bullet.isDispose == false )
						{
							var element:IModel = getElementByPos( dis ) as IModel;
							if ( element && element.isCanBullet )
							{
								if ( bullet.isRemoveByModelType( element.modelType ) )
								{
									if ( element.hitTarget.hitTestObject( bullet.hitTarget ) )
									{
										element.injured( bullet.attackHp );
										bullet.isDispose = true;
										
										var effect:Game32BulletEffect = new Game32BulletEffect( bullet.type );
										effect.setPos( element.x, element.y );
										effectContainer.addChild( effect );
									}
								}
							}
						}
						
						if ( dis != player )
						{
							dis.updatePos();
						}
					}
					
					if ( dis.isDispose )
					{
						if ( dis.modelType == Game32ConstType.HOST )
						{
							gameEndResult();
						}
						else if ( enemy && enemy.isDeath )
						{
							gameData.crtScore += enemy.score;
							calls( refreshScore );
							needKillEnemyNum--;
							updateEnemyNum();
						}
						else if ( dis.modelType == Game32ConstType.WALL )
						{
							curMapArray[dis.col][dis.row] = 0;
						}
						DisplayUtil.removeFromParent( dis as DisplayObject );
						dis.dispose();
						leng--;
						i--;
					}
				}
			}
			
			if ( player.isKeyDown )
			{
				var pTemp:IElement = getElementByPos( player ) as IElement;
				if ( 	
						player.isEdge || 
						!pTemp || 
						pTemp.modelType == Game32ConstType.PROP || 
						pTemp.modelType == Game32ConstType.BULLET )
				{
					player.updatePos();
				}
				// 检查是否是道具
				if ( pTemp && pTemp.modelType == Game32ConstType.PROP )
				{
					// 是否和道具发生碰撞
					if ( player.hitTarget.hitTestObject( pTemp.hitTarget ) )
					{
						pTemp.isDispose = true;
						propList.addProp( pTemp.type );
						player.setPropType( pTemp.type, startAndStopAllEnemy );
						switch  ( pTemp.type )
						{
							case Game32ConstType.PROP_ITEM_1: // 变钢墙
								setHostWallStatus( 2 );
								break;
							case Game32ConstType.PROP_ITEM_2: // 停止enemy动作
								startAndStopAllEnemy( false );
								break;
							case Game32ConstType.PROP_ITEM_3:
								break;
							case Game32ConstType.PROP_ITEM_4:// 炸弹
								killAllEnemy();
								break;
							case Game32ConstType.PROP_ITEM_5:
								break;
						}
					}
				}
			}
			
			var enemyNum:int = curEnemyNum;
			if ( !enemyList.isOvered && enemyNum < 4 )
			{
				createRandomEnemy();
			}
			else 
			{
				if ( enemyList.isOvered && enemyNum== 0 )
				{
					gameData.crtScore += 100;
					passRound();
				}
			}
		}
		
		///////////////////////////// 
		
		/**
		 * 更改为钢铁墙
		 */
		private function setHostWallStatus( type:int ):void
		{
			var col:int = Game32ConstType.COL;
			var row:int = Game32ConstType.ROW;
			var sr:int  = (row - 4) * 0.5 - 1;
			var er:int  = sr + 5;
			var element:IElement;
			for ( var c:int = col - 4; c < col; c++ )
			{
				for ( var r:int = sr; r < er; r++ )
				{
					element = curMapArray[c][r] as IElement;
					if ( element )
					{
						element.type = type;
					}
				}
			}
		}
		
		/**
		 * 定身道具使用 和 恢复
		 */
		private function startAndStopAllEnemy( isStart:Boolean = true ):void
		{
			var leng:int = modelContainer.numChildren;
			var element:IEnemy;
			for ( var i:int = 0; i < leng; i++ )
			{
				element = modelContainer.getChildAt( i ) as IEnemy;
				if ( element )
				{
					if ( isStart ) element.startAction();
					else element.stopAction();
				}
			}
		}
		
		/**
		 * 炸弹道具
		 */
		private function killAllEnemy():void
		{
			var leng:int = modelContainer.numChildren;
			var element:IEnemy;
			for ( var i:int = 0; i < leng; i++ )
			{
				element = modelContainer.getChildAt( i ) as IEnemy;
				if ( element )
				{
					element.isDeath = true;
					element.isDispose = true;
				}
			}
		}
		
		/////////////////////////////////////////
		private function get curEnemyNum():int
		{
			var leng:int = modelContainer.numChildren;
			var element:IElement;
			var num:int = 0;
			for ( var i:int = 0; i < leng; i++ )
			{
				element = modelContainer.getChildAt( i ) as IElement;
				if ( element && element.modelType == Game32ConstType.ENEMY && !element.isDispose )
				{
					num++;
				}
			}
			return num;
		}
		
	}
}